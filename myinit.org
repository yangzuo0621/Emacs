#+STARTUP: overview

* Startup of emacs configuration

I will put the essential configs in the init.el file, and put all other configs in org files.

** Setting up the Package Manager
   [[https://melpa.org/#/][Melpa]] - the emacs package manager, useful functions are: package-refresh-contents, package-install.
** Setting up use-package
   [[https://github.com/jwiegley/use-package][use-package]] is a fancy package that can be used to install other packages.
** Use org file to manage the emacs configs
   We can use el files to group the emacs configs, but it would be
   easier to manage them using org file. Just use the function org-babel-load-file.

The contents of the init.el file: 
#+BEGIN_SRC
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq make-backup-files nil)
  (global-display-line-numbers-mode)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (setq save-interprogram-paste-before-kill t)
  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this
#+END_SRC

* Useful packages
** try
  [[https://github.com/larstvei/try][try]] package allows to try out Emacs packages without installing
  them.
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

** which key
  [[https://github.com/justbur/emacs-which-key][which-key]] package is a minor mode for Emacs that displays the key
  bindings following your currently entered incomplete command (a
  prefix) in a popup, it brings up some helps for key bindings.
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+END_SRC

* Org mode
  - setup browser for org mode
  - setup [[https://github.com/integral-dw/org-bullets][org-bullets]] package
  #+BEGIN_SRC emacs-lisp
    ;; Org-mode stuff
    (setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))
  #+END_SRC
* Buffers
  enable [[https://www.masteringemacs.org/article/introduction-to-ido-mode][ido mode]]
  #+BEGIN_SRC emacs-lisp
    ;; ido mode
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)

    (defalias 'list-buffers 'ibuffer)
    ; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC
* Windows
  - setup [[https://github.com/abo-abo/ace-window][acs-window]] package for easy window switching
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
    ;    (custom-set-faces
    ;     '(aw-leading-char-face
    ;      ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC
* Search - Swiper / Ivy / Counsel
  - Ivy, a generic completion mechanism for Emacs.
  - Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
  - [[https://github.com/abo-abo/swiper][Swiper]], an Ivy-enhanced alternative to Isearch.
  - [[http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/][COUNSEL-YANK-POP WITH A TWEAK]]
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+END_SRC
* Yanking
* Navigation
  setup [[https://github.com/abo-abo/avy][avy]] for jumping to visible text using a char-based decision
  tree.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-line))
#+END_SRC
* Complete
  - setup [[https://github.com/company-mode/company-mode][company-mode]]
  - another option [[https://github.com/auto-complete/auto-complete][auto-complete]] (replaced by company)

#+BEGIN_SRC emacs-lisp
  ;(add-hook 'after-init-hook 'global-company-mode)
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))

  ;(use-package auto-complete
  ;  :ensure t
  ;  :init
  ;  (progn
  ;    (ac-config-default)
  ;    (global-auto-complete-mode t)
  ;    ))
#+END_SRC
* Syntax checking
  [[https://www.flycheck.org/en/latest/index.html][flycheck]]

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC

* Python
  For Emacs 27, use LSP, and use elpy for Emacs 26 or lower
** install [[https://github.com/python-lsp/python-lsp-server][Python LSP Server]]
** install [[https://github.com/PyCQA/pylint][pylint]], virtualenv
   #+BEGIN_SRC bash
     sudo apt install python3-pip
     pip3 install pylint
     pip3 install virtualenv
   #+END_SRC
** install [[https://github.com/jorgenschaefer/elpy][elpy]]
** Jedi - python auto-completion for Emacs
   - install [[https://github.com/tkf/emacs-jedi][jedi]] package, for company user, install [[https://github.com/emacsorphanage/company-jedi][company-jedi]] instead.
   - M-x jedi:install-server
   - [[http://tkf.github.io/emacs-jedi/latest/][jedi settings]]
   
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")
  (setq flycheck-python-pylint-executable "python3")

  ;(use-package jedi
  ;  :ensure t
  ;  :init
  ;  (add-hook 'python-mode-hook 'jedi:setup)
  ;  (add-hook 'python-mode-hook 'jedi:ac-setup))

  ;(use-package company-jedi
  ;  :ensure t
  ;  :config
  ;  (defun my/python-mode-hook ()
  ;    (add-to-list 'company-backends 'company-jedi))
  ;  (add-hook 'python-mode-hook 'jedi:setup)
  ;  (setq jedi:complete-on-dot t)
  ;  (add-hook 'python-mode-hook 'my/python-mode-hook))

  ;(use-package elpy
  ;  :ensure t
  ;  :init
  ;  (elpy-enable))

  (use-package lsp-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook #'lsp)
    (setq lsp-enable-snippet nil))
#+END_SRC

* Yasnippet
  - setup [[https://github.com/joaotavora/yasnippet][yasnippet]] package
  - clone the [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] repo or M-x package-install RET yasnippet-snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/yasnippet-snippets/snippets")))
#+END_SRC

* Undo Tree
  [[https://elpa.gnu.org/packages/undo-tree.html][undo-tree]]
  - view the undo-tree C-x u
  - use q to select tree node

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

* Theme
  install theme and use function load-theme
  - [[https://emacsthemes.com/][Emacs Themes]]
  - [[https://pawelbx.github.io/emacs-theme-gallery/][Emacs theme gallery]]
#+BEGIN_SRC emacs-lisp
  ;(load-theme 'zenburn t)
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC

* The rest
#+BEGIN_SRC emacs-lisp

; If you like a tabbar
;(use-package tabbar
;  :ensure t
;  :config
;  (tabbar-mode 1))

; (winner-mode 1)
; (windmove-default-keybindings)

#+END_SRC

* Macros
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][Keyboard Macros]]
** method one
  F3 start macro record (press F3 again, insert macro counter)
  F4 end macro record
  F4 do the macro
  
** method two
  C-x + ( start macro record
  C-x + ) end macro record
  C-x + e do the macro

* Misc packages
** setup beacon packge
   [[https://github.com/Malabarba/beacon][beacon]]

   Highlight the cursor whenever the window scrolls

** setup hungry-delete
   [[https://github.com/nflath/hungry-delete][hungry-delete]]

** setup aggressive-indent-mode
   [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]]

** setup expand-region package
   [[https://github.com/magnars/expand-region.el][expand-region]] 

   If you expand too far, you can contract the region by pressing -
   (minus key), or by prefixing the shortcut you defined with a
   negative argument: C-- C-=

   As C-- and C-= are used by windows terminal

   Override the expand shotcut key to C-], and should use <ESC>-- C-]
   to contract the region.

** setup Delete Selection Mode
   [[https://www.emacswiki.org/emacs/DeleteSelectionMode][delete-selection-mode]]

#+BEGIN_SRC emacs-lisp
  ; highlight the select line
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))

  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  ;(use-package aggressive-indent
  ;  :ensure t
  ;  :config
  ;  (global-aggressive-indent-mode 1))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-]") 'er/expand-region))
#+end_SRC

* iedit and narrow / widen dwim
** setup [[https://github.com/victorhge/iedit][iedit]] package, and rebind keys
** narrow
   M-x narrow-to-region or C-x n n
** widen back
   M-x widen or C-x n w
** customize the narrow / widen dwin using function narrow-or-widen-dwim
   [[https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Emacs narrow-or-widen-dwim]]
   C-x n into narrow, then C-x n back to widen, back and forth.
** multiple-cursor
   [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] another useful selection tool

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :config
    (global-set-key (kbd "C-c ;") 'iedit-mode))

  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or defun,
  whichever applies first. Narrowing to org-src-block actually
  calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."

  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
	((region-active-p)
	 (narrow-to-region (region-beginning) (region-end)))
	((derived-mode-p 'org-mode)
	 ;; `org-edit-src-code' is not a real narrowing
	 ;; command. Remove this first conditional if
	 ;; you don't want it.
	 (cond ((ignore-errors (org-edit-src-code) t)
		(delete-other-windows))
	       ((ignore-errors (org-narrow-to-block) t))
	       (t (org-narrow-to-subtree))))
	((derived-mode-p 'latex-mode)
	 (LaTeX-narrow-to-environment))
	(t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  (use-package multiple-cursors
    :ensure t)
#+END_SRC
* Web mode
  - setup [[https://github.com/fxbois/web-mode][web-mode]]
  - Documentation [[https://web-mode.org/][web-mode.el]]
  - Additional package [[https://github.com/smihica/emmet-mode][emmet-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	    ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
#+END_SRC

* Conditional Loading of Emacs Config
  [[https://irreal.org/blog/?p=5716][Conditional Loading of Emacs Config]]

#+BEGIN_SRC emacs-lisp
  (defun load-if-exists (f)
    "load the elisp file only if it exists and is readable"
    (if (file-readable-p f)
	(load-file f)))

  ;; load local elisp configs
  (load-if-exists "some-file.el")
#+END_SRC

* Thoughts on Emacs

  The big thing isn't so much how to do something but just to know
that something can be done and if realizing that something can be done
and then later on can look and figure out how to do it.

* Reference
  [[https://www.john2x.com/emacs.html][John's Emacs Config]]
  [[https://lorefnon.tech/2018/07/14/getting-productive-with-selection-and-navigation-in-emacs/][Getting productive with selection and navigation in Emacs]]
  [[http://irreal.org/blog/][Irreal]]
  [[http://pragmaticemacs.com/][Progmatic Emacs]]
