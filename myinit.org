#+STARTUP: overview

* Startup of emacs configuration

I will put the essential configs in the init.el file, and put all other configs in org files.

** Setting up the Package Manager
   [[https://melpa.org/#/][Melpa]] - the emacs package manager, useful functions are: package-refresh-contents, package-install.
** Setting up use-package
   [[https://github.com/jwiegley/use-package][use-package]] is a fancy package that can be used to install other packages.
** Use org file to manage the emacs configs
   We can use el files to group the emacs configs, but it would be
   easier to manage them using org file. Just use the function org-babel-load-file.

The contents of the init.el file: 
#+BEGIN_SRC
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq make-backup-files nil)
(global-display-line-numbers-mode)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* Useful packages
** try
  [[https://github.com/larstvei/try][try]] package allows to try out Emacs packages without installing
  them.
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

** which key
  [[https://github.com/justbur/emacs-which-key][which-key]] package is a minor mode for Emacs that displays the key
  bindings following your currently entered incomplete command (a
  prefix) in a popup, it brings up some helps for key bindings.
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+END_SRC

* Org mode
  - setup browser for org mode
  - setup [[https://github.com/integral-dw/org-bullets][org-bullets]] package
  #+BEGIN_SRC emacs-lisp
    ;; Org-mode stuff
    (setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))
  #+END_SRC
* Buffers
  enable [[https://www.masteringemacs.org/article/introduction-to-ido-mode][ido mode]]
  #+BEGIN_SRC emacs-lisp
    ;; ido mode
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)

    (defalias 'list-buffers 'ibuffer)
    ; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC
* Windows
  - setup [[https://github.com/abo-abo/ace-window][acs-window]] package for easy window switching
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
    ;    (custom-set-faces
    ;     '(aw-leading-char-face
    ;      ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC
* Search - Swiper / Ivy / Counsel
  - Ivy, a generic completion mechanism for Emacs.
  - Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
  - [[https://github.com/abo-abo/swiper][Swiper]], an Ivy-enhanced alternative to Isearch.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+END_SRC

* Navigation
  setup [[https://github.com/abo-abo/avy][avy]] for jumping to visible text using a char-based decision
  tree.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-line))
#+END_SRC
* Complete
  - setup [[https://github.com/company-mode/company-mode][company-mode]]
  - another option [[https://github.com/auto-complete/auto-complete][auto-complete]] (replaced by company)

#+BEGIN_SRC emacs-lisp
  ;(add-hook 'after-init-hook 'global-company-mode)
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))

  ;(use-package auto-complete
  ;  :ensure t
  ;  :init
  ;  (progn
  ;    (ac-config-default)
  ;    (global-auto-complete-mode t)
  ;    ))
#+END_SRC
* Theme
  install theme and use function load-theme
  - [[https://emacsthemes.com/][Emacs Themes]]
  - [[https://pawelbx.github.io/emacs-theme-gallery/][Emacs theme gallery]]
#+BEGIN_SRC emacs-lisp
  ;(load-theme 'zenburn t)
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC

* the rest
#+BEGIN_SRC emacs-lisp

; If you like a tabbar
;(use-package tabbar
;  :ensure t
;  :config
;  (tabbar-mode 1))

; (winner-mode 1)
; (windmove-default-keybindings)

#+END_SRC
